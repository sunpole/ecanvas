// scripts/grid.js

// ======= –ù–ê–°–¢–†–û–ô–ö–ò =======
import { GRID_SIZE, OUTLINE, GRID_TOTAL } from './config.js';

// ======= –°–¢–ê–†–¢ –ò –§–ò–ù–ò–® =======
import { SPAWN_CELLS, EXIT_CELLS } from './config.js';

// ======= –†–ï–ê–õ–¨–ù–û–ï –ü–û–õ–ï –ò –§–£–ù–ö–¶–ò–ò =======
export let grid = []; // –î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, —Ö—Ä–∞–Ω—è—â–∏–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–µ—Ç–æ–∫

// ======= –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–û–†–î–ò–ù–ê–¢ =======
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–∫–≤–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å—Ç–æ–ª–±—Ü–æ–≤ (A, B, ..., Z, AA, AB...)
function generateColumnLabels(count) {
  let labels = [];
  for (let i = 0; i < count; i++) {
    let label = '', n = i;
    do {
      label = String.fromCharCode(65 + (n % 26)) + label;
      n = Math.floor(n / 26) - 1;
    } while (n >= 0);
    labels.push(label);
  }
  return labels;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å—Ç—Ä–æ–∫ (10, 9, ..., 1)
function generateRowLabels(count) {
  return Array.from({ length: count }, (_, i) => (count - i).toString());
}

const COORD_LETTERS = generateColumnLabels(GRID_SIZE);
const COORD_NUMS = generateRowLabels(GRID_SIZE);

// ======= –ö–ê–ù–í–ê–° –ò –ö–û–ù–¢–ï–ö–°–¢ =======
const canvas = document.getElementById('game-canvas');
if (!canvas) {
  console.error("‚ùå Canvas —Å id='game-canvas' –Ω–µ –Ω–∞–π–¥–µ–Ω!");
} else {
  console.log("‚úÖ Canvas –Ω–∞–π–¥–µ–Ω");
}
const ctx = canvas?.getContext('2d');
if (!ctx) {
  console.error("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç 2D –Ω–µ –ø–æ–ª—É—á–µ–Ω!");
} else {
  console.log("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç 2D –ø–æ–ª—É—á–µ–Ω");
}

let selectedCell = null; // –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–ª–µ—Ç–∫–∞

// ======= –°–û–ó–î–ê–ù–ò–ï –°–ï–¢–ö–ò =======
// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–µ—Ç–∫–∏ GRID_SIZE x GRID_SIZE
export function createGrid(rows = GRID_SIZE, cols = GRID_SIZE) {
  grid = [];
  for (let row = 0; row < rows; row++) {
    let rowArr = [];
    for (let col = 0; col < cols; col++) {
      let status = 'empty';

      // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É
      if (SPAWN_CELLS.some(cell => cell.row === row && cell.col === col)) {
        status = 'spawn';
      }
      if (EXIT_CELLS.some(cell => cell.row === row && cell.col === col)) {
        status = 'exit';
      }
      rowArr.push({ row, col, status });
    }
    grid.push(rowArr);
  }
  console.log("‚úÖ –°–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞", grid);
}

// ======= –ü–†–û–í–ï–†–ö–ê –ü–†–û–•–û–î–ò–ú–û–°–¢–ò =======
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥–æ–º
export function isCellWalkable(row, col) {
  if (row < 0 || row >= GRID_SIZE || col < 0 || col >= GRID_SIZE) return false;
  const st = grid[row][col]?.status;
  return (st === 'empty' || st === 'exit');
}

// ======= –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê =======
// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∫–ª–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'tower', 'blocked')
export function setCellStatus(row, col, status) {
  if (row < 0 || row >= GRID_SIZE || col < 0 || col >= GRID_SIZE) return false;
  grid[row][col].status = status;
  return true;
}

// ======= –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –û–†–ò–ï–ù–¢–ê–¶–ò–ò =======
function isLandscape() {
  return window.matchMedia("(orientation: landscape)").matches;
}

// ======= –í–´–ß–ò–°–õ–ï–ù–ò–ï –†–ê–ó–ú–ï–†–û–í –ü–ê–ù–ï–õ–ï–ô =======
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤—ã—Å–æ—Ç/—à–∏—Ä–∏–Ω –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–µ–π
function getPanelsSize() {
  const topPanel = document.querySelector('.top-panel');
  const bottomPanel = document.querySelector('.bottom-panel');
  if (!topPanel) console.warn("‚ö†Ô∏è top-panel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
  if (!bottomPanel) console.warn("‚ö†Ô∏è bottom-panel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

  if (!isLandscape()) {
    return {
      main: (topPanel?.getBoundingClientRect().height || 0) +
            (bottomPanel?.getBoundingClientRect().height || 0)
    };
  } else {
    return {
      main: (topPanel?.getBoundingClientRect().width || 0) +
            (bottomPanel?.getBoundingClientRect().width || 0)
    };
  }
}

// ======= –ü–û–õ–£–ß–ï–ù–ò–ï –¶–í–ï–¢–û–í –ò–ó CSS-–ü–ï–†–ï–ú–ï–ù–ù–´–• =======
function getColors() {
  const root = getComputedStyle(document.documentElement);
  return {
    FIELD_BG: root.getPropertyValue('--color-card').trim() || '#222',
    CELL_BG: root.getPropertyValue('--color-cell').trim() || '#343a40',
    CELL_BORDER: root.getPropertyValue('--color-border').trim() || '#283042',
    SELECT_BG: root.getPropertyValue('--color-accent').trim() || '#337ad9',
    COORD_BG: root.getPropertyValue('--coord-bg').trim() || '#2567e7',
    COORD_TEXT: root.getPropertyValue('--coord-text').trim() || '#ffe438',
    SPAWN_BG: '#ffe066',
    EXIT_BG: '#a31322'
  };
}

// ======= –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –ò –†–ê–°–ß–Å–¢ –ö–ê–ù–í–ê–°–ê =======
function resizeCanvas() {
  if (!canvas || !ctx) {
    console.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω resizeCanvas ‚Äî canvas –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –≥–æ—Ç–æ–≤—ã");
    return;
  }

  const w = window.innerWidth;
  const h = window.innerHeight;
  const panels = getPanelsSize();
  const isLand = isLandscape();

  // –í—ã–±–æ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞
  let maxSize;
  if (!isLand) {
    maxSize = Math.min(Math.floor(h - panels.main), Math.floor(w * 0.92));
  } else {
    maxSize = Math.min(Math.floor(h * 0.92), Math.floor(w - panels.main));
  }
  maxSize = Math.max(maxSize, 200);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
  canvas.style.width = maxSize + 'px';
  canvas.style.height = maxSize + 'px';
  canvas.style.aspectRatio = '1 / 1';

  const dpr = window.devicePixelRatio || 1;
  canvas.width = maxSize * dpr;
  canvas.height = maxSize * dpr;
  ctx.setTransform(1, 0, 0, 1, 0, 0);
  ctx.scale(dpr, dpr);

  drawGrid();
}

// ======= –û–¢–†–ò–°–û–í–ö–ê –°–ï–¢–ö–ò =======
function drawGrid() {
  if (!ctx) {
    console.error("‚ùå drawGrid: –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –≥–æ—Ç–æ–≤");
    return;
  }

  const size = parseFloat(canvas.style.width) || 300;
  const cellSize = size / GRID_TOTAL;
  const C = getColors();

  ctx.clearRect(0, 0, size, size);
  ctx.fillStyle = C.FIELD_BG;
  ctx.fillRect(0, 0, size, size);

  ctx.font = `bold ${Math.floor(cellSize * 0.55)}px Arial`;
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";

  // –†–∏—Å—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∫—Ä–∞—è–º
  for (let col = 1; col <= GRID_SIZE; col++) {
    ctx.fillStyle = C.COORD_BG;
    ctx.fillRect(col * cellSize, 0, cellSize, cellSize);
    ctx.fillRect(col * cellSize, (GRID_TOTAL - 1) * cellSize, cellSize, cellSize);
  }
  for (let row = 1; row <= GRID_SIZE; row++) {
    ctx.fillStyle = C.COORD_BG;
    ctx.fillRect(0, row * cellSize, cellSize, cellSize);
    ctx.fillRect((GRID_TOTAL - 1) * cellSize, row * cellSize, cellSize, cellSize);
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞ –∏ –∫–ª–µ—Ç–∫–∏
  for (let row = 0; row < GRID_TOTAL; row++) {
    for (let col = 0; col < GRID_TOTAL; col++) {
      let x = col * cellSize;
      let y = row * cellSize;

      const isSpawn = SPAWN_CELLS.some(cell => cell.row + OUTLINE === row && cell.col === col);
      const isExit = EXIT_CELLS.some(cell => cell.row + OUTLINE === row && cell.col === col);

      // –ó–∞–ª–∏–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤ –∏ –≤—ã—Ö–æ–¥–æ–≤
      if (isSpawn) {
        ctx.fillStyle = C.SPAWN_BG;
        ctx.fillRect(x, y, cellSize, cellSize);
      } else if (isExit) {
        ctx.fillStyle = C.EXIT_BG;
        ctx.fillRect(x, y, cellSize, cellSize);
      }

      // –Ø—á–µ–π–∫–∏ –ø–æ–ª—è (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
      if (row >= OUTLINE && row < GRID_SIZE + OUTLINE && col >= OUTLINE && col < GRID_SIZE + OUTLINE) {
        ctx.fillStyle = selectedCell && selectedCell.row === (row - OUTLINE) && selectedCell.col === (col - OUTLINE)
          ? C.SELECT_BG : C.CELL_BG;
        ctx.fillRect(x, y, cellSize, cellSize);
        ctx.strokeStyle = C.CELL_BORDER;
        ctx.lineWidth = 1.2;
        ctx.strokeRect(x, y, cellSize, cellSize);
      }
    }
  }

  // –ü–æ–¥–ø–∏—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
  for (let col = 1; col <= GRID_SIZE; col++) {
    let x = (col + OUTLINE - 1) * cellSize + cellSize / 2;
    ctx.fillStyle = C.COORD_TEXT;
    ctx.fillText(COORD_LETTERS[col - 1] || '', x, cellSize / 2);
    ctx.fillText(COORD_LETTERS[col - 1] || '', x, (GRID_TOTAL - 1) * cellSize + cellSize / 2);
  }
  for (let row = 1; row <= GRID_SIZE; row++) {
    let y = (row + OUTLINE - 1) * cellSize + cellSize / 2;
    ctx.fillStyle = C.COORD_TEXT;
    ctx.fillText(COORD_NUMS[row - 1] || '', cellSize / 2, y);
    ctx.fillText(COORD_NUMS[row - 1] || '', (GRID_TOTAL - 1) * cellSize + cellSize / 2, y);
  }
}

// ======= –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ö–û–í =======
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏/—Ç–∞—á–∞
function getCellByCoords(evt) {
  const rect = canvas.getBoundingClientRect();
  let clientX, clientY;
  if (evt.touches && evt.touches.length) {
    clientX = evt.touches[0].clientX;
    clientY = evt.touches[0].clientY;
  } else {
    clientX = evt.clientX;
    clientY = evt.clientY;
  }
  let x = clientX - rect.left;
  let y = clientY - rect.top;
  const cellSize = rect.width / GRID_TOTAL;
  const col = Math.floor(x / cellSize) - OUTLINE;
  const row = Math.floor(y / cellSize) - OUTLINE;

  if (col < 0 || row < 0 || col >= GRID_SIZE || row >= GRID_SIZE) {
    console.log("‚¨ú –ö–ª–∏–∫ –≤–Ω–µ –ø–æ–ª—è");
    return null;
  }

  console.log(`üìç –ö–ª–∏–∫ –ø–æ –∫–ª–µ—Ç–∫–µ: [${row}, ${col}]`);
  return { row, col };
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ
function handleClick(evt) {
  const cell = getCellByCoords(evt);
  if (!cell) return;

  let currentStatus = grid[cell.row][cell.col].status;
  let newStatus = currentStatus === 'empty' ? 'tower' : 'empty';

  // –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—É—Ç–∏, –µ—Å–ª–∏ –Ω–æ–≤–∞—è –∫–ª–µ—Ç–∫–∞ —Å—Ç–∞–Ω–µ—Ç 'tower'
  if (newStatus === 'tower') {
    setCellStatus(cell.row, cell.col, newStatus);
    const pathExists = checkPathExists(); // –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Ç–∏
    if (!pathExists) {
      // –ï—Å–ª–∏ –ø—É—Ç–∏ –Ω–µ—Ç, –æ—Ç–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
      setCellStatus(cell.row, cell.col, currentStatus);
      alert('–ù–µ–ª—å–∑—è –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –ø—É—Ç—å!');
      return;
    }
  } else {
    setCellStatus(cell.row, cell.col, newStatus);
  }

  selectedCell = cell;
  drawGrid();
}



// ======= –î–û–°–¢–£–ü –ö –í–´–ë–†–ê–ù–ù–û–ô –ö–õ–ï–¢–ö–ï =======
export function getSelectedCell() {
  return selectedCell;
}

export function setSelectedCell(cell) {
  if (
    cell &&
    typeof cell.row === 'number' &&
    typeof cell.col === 'number' &&
    cell.row >= 0 && cell.row < GRID_SIZE &&
    cell.col >= 0 && cell.col < GRID_SIZE
  ) {
    selectedCell = cell;
    drawGrid();
    return true;
  }
  return false;
}
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ) –∫–ª–µ—Ç–∫–∏ ‚Äî –¥–ª—è pathfinding
export function getNeighbors(row, col) {
  const neighbors = [];
  const deltas = [
    [-1, 0], [1, 0],   // –≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑
    [0, -1], [0, 1]    // –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ
  ];
  for (let [dr, dc] of deltas) {
    const nr = row + dr;
    const nc = col + dc;
    if (nr >= 0 && nr < GRID_SIZE && nc >= 0 && nc < GRID_SIZE)
      neighbors.push(grid[nr][nc]);
  }
  return neighbors;
}
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ) –∫–ª–µ—Ç–∫–∏ ‚Äî –¥–ª—è pathfinding
export function getNeighbors(row, col) {
  const neighbors = [];
  const deltas = [
    [-1, 0], [1, 0],   // –≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑
    [0, -1], [0, 1]    // –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ
  ];
  for (let [dr, dc] of deltas) {
    const nr = row + dr;
    const nc = col + dc;
    if (nr >= 0 && nr < GRID_SIZE && nc >= 0 && nc < GRID_SIZE)
      neighbors.push(grid[nr][nc]);
  }
  return neighbors;
}


// –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ –∏–ª–∏ —Å–º–µ–Ω–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
window.addEventListener('resize', () => requestAnimationFrame(resizeCanvas));
window.addEventListener('orientationchange', () => setTimeout(resizeCanvas, 100));

// –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Å–º–µ–Ω–æ–π —Ç–µ–º—ã (dark/light)
if (canvas) {
  const obs = new MutationObserver(() => drawGrid());
  obs.observe(document.documentElement, { attributes: true, attributeFilter: ['data-theme'] });

  requestAnimationFrame(resizeCanvas);
  setTimeout(resizeCanvas, 200);
}

// ======= –°–¢–ê–†–¢–û–í–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =======
createGrid();
resizeCanvas();
